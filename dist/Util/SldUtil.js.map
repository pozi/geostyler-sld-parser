{"version":3,"file":"SldUtil.js","sourceRoot":"","sources":["../../src/Util/SldUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { Expression, PropertyType } from 'geostyler-style/dist/style';\r\nimport { SldVersion } from '../SldStyleParser';\r\nimport { GeoStylerFunction, GeoStylerNumberFunction } from 'geostyler-style/dist/functions';\r\nimport { isGeoStylerFunction, isGeoStylerNumberFunction } from 'geostyler-style/dist/typeguards';\r\n\r\n/**\r\n * Cast to Number if it is not a GeoStylerFunction\r\n *\r\n * @param exp The GeoStylerExpression\r\n * @returns The value casted to a number or the GeoStylerNumberFunction\r\n */\r\nexport function numberExpression(exp: Expression<PropertyType>): GeoStylerNumberFunction | number {\r\n  return isGeoStylerNumberFunction(exp) ? exp : Number(exp);\r\n}\r\n\r\n/**\r\n * This converts a GeoStylerFunction into a fast-xml-parser representation\r\n * of a sld function.\r\n *\r\n * @param geostylerFunction A GeoStylerFunction\r\n * @returns\r\n */\r\nexport function geoStylerFunctionToSldFunction(geostylerFunction: GeoStylerFunction): any {\r\n  const {\r\n    name\r\n  } = geostylerFunction;\r\n\r\n  // TODO: Typing of functions without args should be refactored in geostyler-style\r\n  if (name === 'pi' || name === 'random') {\r\n    return [{\r\n      Function: [],\r\n      ':@': {\r\n        '@_name': name\r\n      }\r\n    }];\r\n  }\r\n\r\n  if (name === 'property') {\r\n    return {\r\n      PropertyName: [{\r\n        '#text': geostylerFunction.args[0]\r\n      }]\r\n    };\r\n  }\r\n\r\n  const sldFunctionArgs = geostylerFunction.args.map(arg => {\r\n    if (isGeoStylerFunction(arg)) {\r\n      const argAsFunction = geoStylerFunctionToSldFunction(arg);\r\n      return Array.isArray(argAsFunction) ? argAsFunction[0] : argAsFunction;\r\n    } else {\r\n      return {\r\n        Literal: [{\r\n          '#text': arg\r\n        }]\r\n      };\r\n    }\r\n  });\r\n\r\n  const sldFunctionObj = [{\r\n    Function: sldFunctionArgs,\r\n    ':@': {\r\n      '@_name': name\r\n    }\r\n  }];\r\n\r\n  return sldFunctionObj;\r\n}\r\n\r\n/**\r\n * This converts the fast-xml-parser representation of a sld function into\r\n * a GeoStylerFunction.\r\n *\r\n * @param sldFunction An array of objects as created by the fast-xml-parser\r\n * @returns The GeoStylerFunction\r\n */\r\nexport function sldFunctionToGeoStylerFunction(sldFunction: any[]): GeoStylerFunction {\r\n  const name = sldFunction?.[0]?.[':@']?.['@_name'];\r\n  const args = sldFunction?.[0].Function.map((sldArg: any) => {\r\n    if (sldArg.Function) {\r\n      return sldFunctionToGeoStylerFunction([sldArg]);\r\n    } else if (sldArg.PropertyName) {\r\n      return {\r\n        name: 'property',\r\n        args: [sldArg?.PropertyName?.[0]?.['#text']]\r\n      };\r\n    } else {\r\n      return sldArg?.Literal?.[0]?.['#text'];\r\n    }\r\n  });\r\n\r\n  const geoStylerFunction: any = { name  };\r\n  if (args.length > 0) {\r\n    geoStylerFunction.args = args;\r\n  }\r\n  return geoStylerFunction;\r\n}\r\n\r\n/**\r\n * Get all child objects with a given tag name.\r\n *\r\n * @param elements An array of objects as created by the fast-xml-parser.\r\n * @param tagName The tagname to get.\r\n * @returns An array of objects as created by the fast-xml-parser.\r\n */\r\nexport function getChildren(elements: any[], tagName: string): any[] {\r\n  return elements?.filter(obj => Object.keys(obj).includes(tagName));\r\n}\r\n\r\n/**\r\n * Get the child object with a given tag name.\r\n *\r\n * @param elements An array of objects as created by the fast-xml-parser.\r\n * @param tagName The tagname to get.\r\n * @returns An object as created by the fast-xml-parser.\r\n */\r\nexport function getChild(elements: any[], tagName: string): any {\r\n  return elements?.find(obj => Object.keys(obj).includes(tagName));\r\n}\r\n\r\n/**\r\n * Get the value of a Css-/SvgParameter.\r\n *\r\n * @param elements An array of objects as created by the fast-xml-parser.\r\n * @param parameter The parameter name to get.\r\n * @param sldVersion The sldVersion to distinguish if CssParameter or SvgParameter is used.\r\n * @returns The string value of the searched parameter.\r\n */\r\nexport function getParameterValue(elements: any[], parameter: string, sldVersion: SldVersion): any {\r\n  if (!elements) {\r\n    return undefined;\r\n  }\r\n  const paramKey = sldVersion === '1.0.0' ? 'CssParameter' : 'SvgParameter';\r\n  const element = elements\r\n    .filter(obj => Object.keys(obj)?.includes(paramKey))\r\n    .find(obj => obj?.[':@']?.['@_name'] === parameter);\r\n\r\n  // we expected a value but received an array so we check if we have a function\r\n  if (element?.[paramKey]?.[0]?.Function) {\r\n    return sldFunctionToGeoStylerFunction(element?.[paramKey]);\r\n  }\r\n  // … or a Literal\r\n  if (element?.[paramKey]?.[0]?.Literal) {\r\n    return element?.[paramKey]?.[0]?.Literal?.[0]?.['#text'];\r\n  }\r\n\r\n  return element?.[paramKey]?.[0]?.['#text'];\r\n}\r\n\r\n/**\r\n * Get the attribute value of an object.\r\n *\r\n * @param obj The object to check.\r\n * @param name The name of the attribute\r\n * @returns The value of the requested parameter (if available)\r\n */\r\nexport function getAttribute(obj: any, name: string): any | undefined {\r\n  return obj?.[':@']?.[`@_${name}`];\r\n}\r\n\r\n/**\r\n * Determine if a fast-xml-parser object is a symbolizer representation.\r\n *\r\n * @param obj The object to check.\r\n * @returns Whether the passed object is a symbolizer representation or not.\r\n */\r\nexport function isSymbolizer(obj: any): boolean {\r\n  return Object.keys(obj).some(key => key.endsWith('Symbolizer'));\r\n}\r\n\r\n/**\r\n * Generic get function which tries to get the nested value of the given object or array.\r\n * It contains some SLD specific handling and tries to be smart but keep the syntax easy.\r\n * It always takes the first child of an array if no index was specified in the path argument.\r\n * e.g.\r\n *   Get text value: get(sldSymbolizer, 'Graphic.Mark.WellKnownName.#text')\r\n *   Get an attribute value: get(sldSymbolizer, 'Graphic.ExternalGraphic.OnlineResource.@xlink:href')\r\n *   Get an Css-/SvgParameter value: get(sldSymbolizer, 'Graphic.Mark.Fill.$fill-opacity', '1.1.0')\r\n *   Use with an index: get(sldObject, 'StyledLayerDescriptor.NamedLayer[1].UserStyle.Title.#text')\r\n *\r\n * @param obj A part of the parser result of the fast-xml-parser.\r\n * @param path The path to get the value from.\r\n * @param sldVersion The SLD version to use.\r\n * @returns\r\n */\r\nexport function get(obj: any, path: string, sldVersion?: SldVersion): any | undefined {\r\n  const parts = path.split(/\\.(.*)/s);\r\n  let key = parts[0];\r\n  const rest = parts[1];\r\n  let target = obj;\r\n  let index = 0;\r\n  // handle queries for attributes\r\n  if (rest?.startsWith('@')) {\r\n    target = getChildren(obj, key)[index];\r\n    return getAttribute(target, rest.substring(1));\r\n  }\r\n  if (Array.isArray(obj)) {\r\n    // we expected a value\r\n    if (key === '#text') {\r\n      // … so we check if we have a function\r\n      if (target[0]?.Function) {\r\n        return sldFunctionToGeoStylerFunction(target);\r\n      }\r\n      // … or a Literal\r\n      if (target[0]?.Literal) {\r\n        return target[0]?.Literal?.[0]?.['#text'];\r\n      }\r\n    }\r\n    // we expected a value but received an array so we check if we have a function\r\n    if (key === '#text' && target[0]?.Function) {\r\n      return sldFunctionToGeoStylerFunction(target);\r\n    }\r\n    // handle queries for CssParameter/SvgParameter\r\n    if (key.startsWith('$') && sldVersion) {\r\n      return getParameterValue(target, key.substring(1), sldVersion);\r\n    }\r\n    // handle queries with specified indexes\r\n    if(key.endsWith(']')) {\r\n      index = Number(key.split('[')[1].split(']')[0]);\r\n      key = key.split('[')[0];\r\n    }\r\n    target = getChildren(obj, key)[index];\r\n  }\r\n  if (!target) {\r\n    return undefined;\r\n  }\r\n  if (rest) {\r\n    return get(target[key], rest, sldVersion);\r\n  }\r\n  return target[key];\r\n}\r\n\r\n/**\r\n * Returns the keys of an object where the value is equal to the passed in\r\n * value.\r\n *\r\n * @param object The object to get the key from.\r\n * @param value The value to get the matching key from.\r\n * @return The matching keys.\r\n */\r\nexport function keysByValue(object: any, value: any): string[] {\r\n  return Object.keys(object).filter(key => object[key] === value);\r\n}\r\n"]}